name: Service CI
on:
  workflow_call:
    inputs:
      go_version:
        required: true
        type: string
      helm_version:
        required: true
        type: string
      helm_folder:
        required: false
        type: string
        description: "The folder that composes the Helm Chart, default is app"
        default: "app"
env:
  GO_VERSION: ${{ inputs.go_version }}
  HELM_VERSION: ${{ inputs.helm_version }}
  HELM_FOLDER: ${{ inputs.helm_folder }}
jobs:
  unit-tests:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/run-unit-tests.yaml@main
    with:
      go_version: ${{ env.GO_VERSION }}

  create-unittest-issue:
    needs: [unit-tests]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/create-issue.yaml@main
    if: failure()
    with:
      assignees: ${{ github.actor }}
      issue_template: .github/ACTIONS_ISSUE_TEMPLATES/unit_test_alert.md
      owner_repository: ${{ github.repository }}
      commit_hash: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}

  close-unittest-issues:
    needs: [unit-tests]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/close-issue.yaml@main
    with:
      issue_label: "bug"
      issue_title: "Unit Testing failed"

  static-analysis:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/run-static-analysis.yaml@main
    with:
      go_version: ${{ env.GO_VERSION }}

  create-linting-issue:
    needs: [static-analysis]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/create-issue.yaml@main
    if: failure()
    with:
      assignees: ${{ github.actor }}
      issue_template: .github/ACTIONS_ISSUE_TEMPLATES/static_analysis_alert.md
      owner_repository: ${{ github.repository }}
      commit_hash: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}

  close-linting-issues:
    needs: [static-analysis]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/close-issue.yaml@main
    with:
      issue_label: "technical debt"
      issue_title: "Code Linting failed"

  validate-helm:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/close-issue.yaml@main
    with:
      helm_version: ${{ env.HELM_VERSION }}
      helm_folder: ${{ env.HELM_FOLDER }}

  repo-meta:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.container-image.outputs.IMAGE_NAME }}
      repo_name: ${{ steps.repository-name.outputs.REPO_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract repository's name
        id: repository-name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Create image name
        id: container-image
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//_/g')
          IMAGE_NAME=${BRANCH_NAME}_${{ github.sha }}
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT

  containerize:
    runs-on: ubuntu-latest
    needs: [unit-tests, static-analysis, validate-helm, repo-meta]
    outputs:
      image_digest: ${{ steps.image-digest.outputs.IMAGE_DIGEST }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build the image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.repo-meta.outputs.repo_name }}:${{ needs.repo-meta.outputs.image_name }}

      - name: Retrieve image digest
        id: image-digest
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.repo-meta.outputs.repo_name }}:${{ needs.repo-meta.outputs.image_name }}" | cut -d '@' -f 2)
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT

  package-helm:
    runs-on: ubuntu-latest
    needs: [repo-meta, containerize]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup yq tools
        uses: mikefarah/yq@v4.35.2

      - name: Update helm files
        run: |
          CHART_VERSION="$(cat VERSION_HELM)"
          APP_VERSION="$(cat VERSION)"
          HELM_FOLDER=${{ env.HELM_FOLDER }}
          RUN_NUMBER=${{ github.run_number }}

          REPO_NAME=${{ needs.repo-meta.outputs.repo_name }}
          IMAGE_NAME=${{ needs.repo-meta.outputs.image_name }}
          IMAGE_DIGEST=${{ needs.containerize.outputs.image_digest }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}

          yq eval -i ".version = \"${CHART_VERSION}.${RUN_NUMBER}\"" "./${HELM_FOLDER}/Chart.yaml"
          yq eval -i ".appVersion = \"${APP_VERSION}\"" "./${HELM_FOLDER}/Chart.yaml"

          yq eval -i ".image.repository = \"${DOCKERHUB_USERNAME}/${REPO_NAME}\"" "./${HELM_FOLDER}/values.yaml"
          yq eval -i ".image.tag = \"${IMAGE_NAME}@${IMAGE_DIGEST}\"" "./${HELM_FOLDER}/values.yaml"

          helm lint ./${HELM_FOLDER}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Package Helm chart
        run: |
          helm package ./${{ env.HELM_FOLDER }}
          helm repo index ./${{ env.HELM_FOLDER }} --url ${{ secrets.HELM_REPO_URL }}

      - name: Clone Helm repository
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.HELM_REPO_OWNER }}/${{ secrets.HELM_REPO_NAME }}
          ref: ${{ secrets.HELM_REPO_TARGET }}
          token: ${{ secrets.HELM_REPO_PAT }}
          path: ./${{ secrets.HELM_REPO_NAME }}

      - name: Replace helm packages
        run: |
          APP_FOLDER="./${{ secrets.HELM_REPO_NAME }}/${{ env.HELM_FOLDER }}/${{ needs.repo-meta.outputs.repo_name }}"
          mkdir -p ${APP_FOLDER}
          cp *.tgz ${APP_FOLDER}/

      - name: Push Helm packages
        run: |
          cd ${{ secrets.HELM_REPO_NAME }}
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git pull origin ${{ secrets.HELM_REPO_TARGET }}
          git add .
          git commit -m "${{ github.ref_name }}"
          git push origin ${{ secrets.HELM_REPO_TARGET }}
