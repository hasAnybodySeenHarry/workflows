name: Service CI
on:
  workflow_call:
    inputs:
      go_version:
        required: true
        type: string
      helm_version:
        required: true
        type: string
      helm_folder:
        required: false
        type: string
        description: "The folder that composes the Helm Chart, default is app"
        default: "app"
      unittest_issue_label:
        required: false
        type: string
        default: "bug"
      unittest_issue_title:
        required: false
        type: string
        default: "Unit Testing failed"
      linting_issue_label:
        required: false
        type: string
        default: "technical debt"
      linting_issue_title:
        required: false
        type: string
        default: "Code Linting failed"
      require_changelog:
        required: false
        type: boolean
        default: false
    secrets:
      docker_username:
        required: true
      docker_password:
        required: true
      helm_repo_url:
        required: true
      helm_repo_pat:
        required: true
      helm_repo_target:
        required: true
      helm_repo_owner:
        required: true
      helm_repo_name:
        required: true
      sonar_token:
        required: true

jobs:
  unit-tests:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/run-unit-tests.yaml@main
    with:
      go_version: ${{ inputs.go_version }}

  create-unittest-issue:
    needs: [unit-tests]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/create-issue.yaml@main
    if: failure()
    with:
      assignees: ${{ github.actor }}
      issue_template: .github/ACTIONS_ISSUE_TEMPLATES/unit_test_alert.md
      owner_repository: ${{ github.repository }}
      commit_hash: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}

  close-unittest-issues:
    needs: [unit-tests]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/close-issue.yaml@main
    with:
      issue_label: ${{ inputs.unittest_issue_label }}
      issue_title: ${{ inputs.unittest_issue_title }}

  static-analysis:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/run-static-analysis.yaml@main
    with:
      go_version: ${{ inputs.go_version }}

  create-linting-issue:
    needs: [static-analysis]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/create-issue.yaml@main
    if: failure()
    with:
      assignees: ${{ github.actor }}
      issue_template: .github/ACTIONS_ISSUE_TEMPLATES/static_analysis_alert.md
      owner_repository: ${{ github.repository }}
      commit_hash: ${{ github.sha }}
      branch_name: ${{ github.ref_name }}

  close-linting-issues:
    needs: [static-analysis]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/close-issue.yaml@main
    with:
      issue_label: ${{ inputs.linting_issue_label }}
      issue_title: ${{ inputs.linting_issue_title }}

  validate-helm:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/validate-helm-chart.yaml@main
    with:
      helm_version: ${{ inputs.helm_version }}
      helm_folder: ${{ inputs.helm_folder }}

  analyze-helm:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/analyze-helm-config.yaml@main
    with:
      helm_folder: ${{ inputs.helm_folder }}

  repo-meta:
    uses: hasAnybodySeenHarry/workflows/.github/workflows/gen-repo-meta.yaml@v2

  sonar-analysis:
    needs: [unit-tests, static-analysis, validate-helm, analyze-helm]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/analyze-code-quality.yaml@main
    secrets:
      sonar_token: ${{ secrets.sonar_token }}

  changelog:
    needs: [sonar-analysis]
    if: ${{ inputs.require_changelog }}
    uses: hasAnybodySeenHarry/workflows/.github/workflows/generate-changelog.yaml@main

  containerize:
    needs: [repo-meta, sonar-analysis]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/containerize.yaml@main
    with:
      image_tag: ${{ needs.repo-meta.outputs.image_tag }}
      repository_name: ${{ needs.repo-meta.outputs.repository_name }}
    secrets:
      docker_username: ${{ secrets.docker_username }}
      docker_password: ${{ secrets.docker_password }}

  # sign-attest:
  #   needs: [containerize]
  #   permissions:
  #     contents: read
  #     id-token: write
  #   uses: hasAnybodySeenHarry/workflows/.github/workflows/manage-supply-chain.yaml@main
  #   with:
  #     image_digest: ${{ needs.containerize.outputs.image_digest }}

  package-helm:
    needs: [repo-meta, containerize]
    uses: hasAnybodySeenHarry/workflows/.github/workflows/package-helm-chart.yaml@main
    with:
      helm_version: ${{ inputs.helm_version }}
      helm_folder: ${{ inputs.helm_folder }}
      image_tag: ${{ needs.repo-meta.outputs.image_tag }}
      repository_name: ${{ needs.repo-meta.outputs.repository_name }}
      image_digest: ${{ needs.containerize.outputs.image_digest }}
    secrets:
      docker_username: ${{ secrets.docker_username }}
      helm_repo_url: ${{ secrets.helm_repo_url }}
      helm_repo_pat: ${{ secrets.helm_repo_pat }}
      helm_repo_target: ${{ secrets.helm_repo_target }}
      helm_repo_owner: ${{ secrets.helm_repo_owner }}
      helm_repo_name: ${{ secrets.helm_repo_name }}
